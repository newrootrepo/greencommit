<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%=title %></title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf@3.10.0/notyf.min.css">

    <style>
        .input-container {
            position: relative;
            margin-bottom: 30px;
        }

        input {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        input:focus {
            outline: none;
            border-color: #253e01;
        }

        .placeholder-label {
            position: absolute;
            top: 50%;
            left: 10px;
            font-size: 16px;
            color: #999;
            pointer-events: none;
            transition: 0.2s ease all;
            transform: translateY(-50%);
        }

        input:focus ~ .placeholder-label,
        input:not(:placeholder-shown) ~ .placeholder-label {
            top: -10px;
            font-size: 12px;
            /* color: #e9e9e9; */
            background-color: rgba(255, 255, 255, 0);
            padding: 0 5px;
        }

        input.error {
            border-color: #ff0000;
        }

        .error-message {
            color: #ff0000;
            font-size: 12px;
        }

        .btn-signin {
            width: 100%;
            padding: 10px;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        .btn-signin:hover {
            background-color: #3a5a50;
        }

        .text-center {
            text-align: center;
            margin: 10px 0;
        }
        a {
            color: #dee1df;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
            color: #dee1df;
        }

        
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="inner-container"> 
            <div class="inner-inner-container">
                <div class="input-container">
                    <h1>Sign In</h1>
                    <form id="signin-form">
                        <div class="error-message" id="global-label"></div>
                        <div class="input-container">
                            <input type="text" id="email" name="email" placeholder=" ">
                            <span class="placeholder-label" id="email-label">Email</span>
                        </div>
                        <div class="input-container">
                            <input type="password" id="password" name="password" placeholder=" ">
                            <span class="placeholder-label" id="password-label">Password</span>
                        </div>
                        <button class="btn-signin button-Submit">Submit</button>
                        <div class="text-center">or</div>
                        <div class="text-center">
                            <a href="#">Sign up with Google</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> 
    <script src="https://cdn.jsdelivr.net/npm/notyf@3.10.0/notyf.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('signin-form');

            form.addEventListener('submit', (event) => {
                event.preventDefault();

                // Select input fields
                const emailInput = document.getElementById('email');
                const passwordInput = document.getElementById('password');

                // Select corresponding labels
                const emailLabel = document.getElementById('email-label');
                const passwordLabel = document.getElementById('password-label');

                // Store current values
                let emailValue = emailInput.value.trim();
                let passwordValue = passwordInput.value.trim();

                // Regex patterns
                const emailRegex = /^([a-zA-Z0-9._]+)@([a-zA-Z0-9])+\.([a-z]+)(\.[a-z]+)?$/;

                // Validation
                let isValid = true;

                // Email validation
                if (!emailValue) {
                    showError(emailInput, emailLabel, 'Email is required');
                    isValid = false;
                } else if (!emailRegex.test(emailValue)) {
                    showError(emailInput, emailLabel, 'Invalid Email');
                    isValid = false;
                } else {
                    clearError(emailInput, emailLabel, 'Email');
                }

                // Password validation
                if (!passwordValue) {
                    showError(passwordInput, passwordLabel, 'Password is required', 'red');
                    isValid = false;
                } else {
                    clearError(passwordInput, passwordLabel, 'Password');
                }

        
                if (isValid) {
                    const data = {
                        email: emailValue,
                        password: passwordValue
                    };
                    signin(data);
                }
            });

            function signin(data) {
                fetch('/signin', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                })
                    .then((res) => res.json())
                    .then((res) => {
                        if (res.success) {
                            var notyf = new Notyf();
                            notyf.success(res.message, 1000);
                        } else {
                            handleGlobalError(res.message);
                        }
                    })
                    .catch((error) => {
                        handleGlobalError(error.message);
                    });
            }


            function showError(input, label, message) {
                input.classList.add('error');
                label.textContent = message;
                label.classList.add('error-message');
            }

            function clearError(input, label, defaultMessage) {
                input.classList.remove('error');
                label.textContent = defaultMessage;
                label.classList.remove('error-message');
            }

            function handleGlobalError(message) {
                let errorLabel = document.getElementById('global-label');
                if (errorLabel) {
                    errorLabel.textContent = message;
                }
            }
        });

    </script>
</body>
</html>